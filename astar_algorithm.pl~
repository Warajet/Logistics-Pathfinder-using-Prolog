%Station List
portList(['kualabelait', 'muara', 'kompongsom', 'phnompenh', 'cilacap', 'cirebon', 'jakarta', 'kupang', 'palembang', 'semarang', 'surabaya', 'ujungpandang,', 'bintulu', 'kotakinabalu', 'kuantan', 'kuching', 'kudat', 'labuan', 'lahaddatu', 'lumut', 'miri', 'pasirgudang', 'penang', 'portdickson', 'portklang', 'sandakan', 'sibu', 'tanjungpelepas', 'tawau', 'bassein', 'moulmein', 'yangon', 'batangas', 'cagayandeoro,', 'cebu', 'davao', 'iligano', 'iloilo', 'jolo', 'legaspi', 'manila', 'puertoprincesa,', 'sanfernando', 'subicbay', 'zamboanga', 'singapore', 'bangkok', 'laemchabang', 'pattani', 'phuket', 'sattahip', 'songkhla', 'sriracha', 'danang', 'haiphong', 'hochiminhcity', 'hongay', 'nhatrang']).

% ports - brunei darussalam
location(brunei_darussalam, kualabelait, 4.633333333, 114.20000000).
location(brunei_darussalam, muara,  5.016666667, 115.0666667).

% ports - cambodia
location(cambodia, kompongsom, 10.63333333, 103.50000000).
location(cambodia, phnompenh, 11.58333333, 104.9166667).

%ports - indonesia
location(indonesia, cilacap, 8.733333333, 109.00000000).
location(indonesia, cirebon, 6.683333333, 108.55000000).
location(indonesia, jakarta, 6.10000000, 106.86666666).
location(indonesia, kupang, 10.166666667, 123.56666667).
location(indonesia, palembang, 2.98333333, 104.75000000).
location(indonesia, semarang, 6.88333333, 110.40000000).
location(indonesia, surabaya, 7.216666667, 112.7333333).
location(indonesia, ujungpandang, 5.133333333, 119.4).

% ports - malaysia
location(malaysia, bintulu, 3.266666667, 112.9833333).
location(malaysia, kotakinabalu, 5.983333333, 116).
location(malaysia, kuantan, 3.966666667, 103.4333333).
location(malaysia, kuching,1.566666667, 110.35 ).
location(malaysia, kudat, 6.883333333, 116.85).
location(malaysia, labuan, 5.283333333, 115.25).
location(malaysia, lahaddatu, 5.033333333, 118.3333333).
location(malaysia, lumut, 4.266666667, 100.65).
location(malaysia, miri, 4.433333333,  113.9166667).
location(malaysia, pasirgudang, 1.433333333, 103.90000000).
location(malaysia, penang(georgetown), 5.416666667, 100.35).
location(malaysia,portdickson, 2.516666667, 101.7833333).
location(malaysia, portklang(kelang), 3.00000000, 101.40000000).
location(malaysia, sandakan, 5.833333333, 118.1166667).
location(malaysia, sibu, 2.30000000, 111.8166667).
location(malaysia, tanjungpelepas, 1.35, 103.5333333).
location(malaysia, tawau,  4.233333333, 117.8666667).

%ports - myanmar
location(myanmar, bassein, 16.75, 94.71666667).
location(myanmar, moulmein, 16.48333333, 97.61666667).
location(myanmar, yangon, 16.78333333, 96.25).

% ports - philippines
location(philippines, batangas, 13.75, 121.05).
location(philippines, cagayandeoro, 8.5, 124.65).
location(philippines, cebu, 10.3, 123.8833333).
location(philippines, davao, 7.066666667, 125.6333333).
location(philippines, iligan, 8.25, 124.2).
location(philippines, iloilo, 10.68333333, 122.5833333).
location(philippines, jolo, 6.05, 121).
location(philippines, legaspi, 13.15, 123.75).
location(philippines, manila, 14.58333333, 120.9666667).
location(philippines, puertoprincesa, 9.733333333, 118.7166667).
location(philippines, sanfernando, 16.61666667, 120.3).
location(philippines, subicbay, 14.81666667, 120.3).
location(philippines, zamboanga, 6.9, 122.0666667).

% ports - singapore
location(singapore, singapore, 1.266666667, 103.8333333).

% ports - thailand
location(thailand, bangkok, 13.43333333, 100.5833333).
location(thailand, laemchabang, 13.08333333, 100.8833333).
location(thailand, pattani, 6.95, 101.3).
location(thailand, phuket, 7.816666667, 98.4).
location(thailand, sattahip, 12.58333333, 100.9166667).
location(thailand, songkhla, 7.233333333, 100.5833333).
location(thailand, sriracha, 13.11666667, 100.8666667).

% ports - vietnam
location(vietnam, danang ,16.1 , 108.3).
location(vietnam, haiphong, 20.86666667,106.6833333 ).
location(vietnam, hochiminhcity, 10.83333333,106.75 ).
location(vietnam, hongay, 20.95, 107.1).
location(vietnam, nhatrang, 12.2, 109.2166667).


neighbour_distance(bintulu,miri,103.138181029437).
neighbour_distance(cilacap,cirebon,144.953360114472).
neighbour_distance(cilacap,manila,904.623751943294).
neighbour_distance(cilacap,semarang,159.755728310005).
neighbour_distance(cirebon,kuching,374.644734594914).
neighbour_distance(cirebon,semarang,127.677745088145).
neighbour_distance(danang,haiphong,345.951387928302).
neighbour_distance(danang,nhatrang,276.370692466933).
neighbour_distance(haiphong,hochiminhcity,693.250492127616).
neighbour_distance(hochiminhcity,cilacap,210.997362613813).
neighbour_distance(hochiminhcity,nhatrang,191.842455768886).
neighbour_distance(hochiminhcity,sanfernando,992.865278029557).
neighbour_distance(iligan,cagayandeoro,35.278469531586).
neighbour_distance(jakarta,cilacap,233.37681520364).
neighbour_distance(jakarta,cirebon,122.409197789191).
neighbour_distance(kompongsom,hochiminhcity,221.05585353501).
neighbour_distance(kompongsom,phnompenh,116.333430317171).
neighbour_distance(kompongsom,sriracha,247.258825197455).
neighbour_distance(kualabelait,labuan,85.0929042484488).
neighbour_distance(kuantan,jakarta,278.496188079964).
neighbour_distance(kuantan,palembang,113.408718393012).
neighbour_distance(kudat,sandakan,113.262900676691).
neighbour_distance(kudat,zamboanga,357.832697057065).
neighbour_distance(kupang,cebu,23.4195314357274).
neighbour_distance(lahaddatu,tawau,63.9385155449289).
neighbour_distance(lumut,penang,82.0977533143891).
neighbour_distance(manila,batangas,57.8477778174867).
neighbour_distance(manila,subicbay,47.3815384466985).
neighbour_distance(moulmein,yangon,92.8200537058834).
neighbour_distance(muara,kualabelait,65.2827208678828).
neighbour_distance(palembang,singapore,134.439419459861).
neighbour_distance(pattani,kuantan,253.009516564286).
neighbour_distance(penang,phuket,213.088102491301).
neighbour_distance(phuket,bassein,665.333725746582).
neighbour_distance(phuket,moulmein,601.136819473043).
neighbour_distance(portdickson,portklang,42.6039993008565).
neighbour_distance(portklang,lumut,101.655571520846).
neighbour_distance(puertoprincesa,iligan,387.972861383507).
neighbour_distance(puertoprincesa,iloilo,270.996182430382).
neighbour_distance(puertoprincesa,kupang,331.413726901574).
neighbour_distance(puertoprincesa,legaspi,414.573837035677).
neighbour_distance(puertoprincesa,manila,367.931643640882).
neighbour_distance(sandakan,ujungpandang,100.646110523316).
neighbour_distance(semarang,surabaya,161.647576936825).
neighbour_distance(singapore,pasirgudang,12.4021562848853).
neighbour_distance(songkhla,jakarta,438.243317996244).
neighbour_distance(songkhla,pattani,52.89406295309).
neighbour_distance(sriracha,bangkok,29.0128184910232).
neighbour_distance(sriracha,sattahip,37.003380503557).
neighbour_distance(sriracha,songkhla,406.955051687509).
neighbour_distance(subicbay,sanfernando,124.36798766954).
neighbour_distance(surabaya,bintulu,273.459944914685).
neighbour_distance(surabaya,kotakinabalu,239.852289005762).
neighbour_distance(surabaya,kualabelait,204.980548731734).
neighbour_distance(surabaya,kudat,283.220358810031).
neighbour_distance(surabaya,puertoprincesa,444.295335594182).
neighbour_distance(surabaya,sibu,345.519027632479).
neighbour_distance(tanjungpelepas,portdickson,145.260715347752).
neighbour_distance(ujungpandang,jolo,126.949759332361).
neighbour_distance(ujungpandang,lahaddatu,73.7340983199389).
neighbour_distance(zamboanga,davao,244.874959503608).

% Since the vertices are connected on undirected graph -> edges has 2
% ways
distance(X,Y,Z) :- neighbour_distance(X,Y,Z).
distance(X,Y,Z) :- neighbour_distance(Y,X,Z).
% A star algorithm consist of 2 sections f(n)= actual cost from
% source-> dest and h(n) = heuristic function

% A Star search Algorithm requires 2 function -> 1) get h(n)
% and 2) keep searching the nodes in undirected graph where
% h(n) = Estimated cost of the cheapest path from n to goal from source
aStarSearchAlgorithm(Source, Destination, Path, Cost):- getHeuristicValue(Source, Destination, HeuristicVal),
    search(Destination, [[Source,[Source], HeuristicVal]], [_, Path, Cost]).

search(Source_Station, [[Source_Station, Path, TotalCost] | T], [Source_Station, Path, TotalCost]) :- !.
search(Destination, [[Source_Station, Path, TotalCost] | T], Result) :- expand([Source_Station, Path, TotalCost], Destination, ExpandedNode),
    append(T, ExpandedNode, NewQueue),
    minsort(NewQueue, PriorityQueue),
    %write("\n\nQueue: "),
    %write(NewQueue),
    %write("\nMin Sort: "),
    %write(PriorityQueue), write("\n"),
    search(Destination, PriorityQueue, Result).

expand([Station,Path,_], Destination, Return) :- findall(X, distance(Station,X,_),NextStations),
						 checkPassedNode(NextStations, Path, [], NewNextStations),
						 createNode(NewNextStations, Destination, Path, [], Return).


checkPassedNode([],Path,NewStations, NewStations).
checkPassedNode([Station|T], Path, NewStations, Return) :-
    in(Station, Path) -> checkPassedNode(T, Path, NewStations, Return);
    append(NewStations,[Station],NNewStation),
    checkPassedNode(T, Path, NNewStation, Return).

in(Station, [PassedStation|Path]) :- Station == PassedStation -> !;in(Station,Path).

createNode([], Destination, Path, Nodes, Nodes).
createNode([Station|T], Destination,Path,Nodes, ExpandedNodes) :- append(Path, [Station], NewPath),
	append(Nodes, [[Station, NewPath, 0]], NewNodes),
	createNode(T, Destination, Path, NewNodes, Result),
	%write("RESULT: "),write(Result),write("\n"),
	getFn(Result, Destination, [], ExpandedNodes).


% f(n) = The summation of actual cost from the start node to node n +
% estimated cost of the cheapest path from n to the goal from source to
% destination
% f(n) = In other word = Estimated Cost of the cheapest solution thru n.
getFn([], Destination, Nodes, Nodes).
getFn([[Station, [FromPath|ToPath], TotalCost]|T], Destination, Nodes, Return) :-
    getGn(ToPath,FromPath, 0, Gn),
    getHeuristicValue(Station,Destination,Hn),
    Fn is Gn + Hn,
    % write("FN: ")
    write(Fn),
    append(Nodes, [[Station, [FromPath|ToPath], Fn]], NewNodes),
    getFn(T, Destination, NewNodes, Return).

% g(n) = get the actual cost for a path from the start node to node n.
getGn([], From, Acc, Acc).
getGn([To|T], From, Acc, Gn) :-	distance(From,To,StepCost),!,
    NewAcc is Acc + StepCost,
    getGn(T, To, NewAcc, Gn).

% Power function
power(X,Result) :- Result is X * X.

% h(n) = Estimated cost of the cheapest path from n to goal from source
% and destination location where Source(X1, Y1) -> Destination(X2, Y2).
getHeuristicValue(Start, Destination, HeuristicValue) :- location(_,Start,X1,Y1),
    location(_,Destination,X2,Y2),
    generateDistance(X1,Y1,X2,Y2,Distance),
    HeuristicValue is Distance/106.666667. %max deltaV train

% Calculates the raw distance using Haversine formula for Heuristic
% Distance calculations
generateDistance(X1, Y1, X2, Y2, ReturnV2) :- R is 6371e3, % metres
					      LatRadian1 is X1*pi/180,
					      LatRadian2 is X2*pi/180,
					      DifLat is (X2 - X1)*pi/180,
					      DifLon is (Y2 - Y1)*pi/180,
					      A1 is sin(DifLat/2) * sin(DifLat/2),
					      A2 is cos(LatRadian1) * cos(LatRadian2),
					      A3 is sin(DifLon/2) * sin(DifLon/2),
					      A is A1 + A2 * A3,
					      C is 2 * atan2(sqrt(A), sqrt(1-A)),
					      D is R*C,
					      ReturnV2 is D / 1000.

% Sorting
% setof function -> Sorting without duplicates -> Check if station,
% cost and total cost belongs to the queue or not
% member function -> use to check the membership property of the element

minsort(List, Return) :- setof([TotalCost,Station,Cost], member([Station,Cost,TotalCost], List), Result),
			 findall([Cost,TotalCost,Station], member([Station,Cost,TotalCost],Result),Return).

